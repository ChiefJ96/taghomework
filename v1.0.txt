import React, { useState } from 'react';
import { MessageCircle, Users, Phone, Settings, Search, Send, Paperclip, MoreVertical, ArrowLeft, Video } from 'lucide-react';

// Mock data
const initialChats = [
  { id: 1, name: 'Sarah Johnson', avatar: '/api/placeholder/40/40', lastMessage: 'Are we still meeting tomorrow?', time: '9:41 AM', unread: 2 },
  { id: 2, name: 'Work Group', avatar: '/api/placeholder/40/40', lastMessage: 'Alex: I just sent the proposal', time: 'Yesterday', unread: 0 },
  { id: 3, name: 'Family Chat', avatar: '/api/placeholder/40/40', lastMessage: 'Mom: Check out this recipe!', time: 'Yesterday', unread: 5 },
  { id: 4, name: 'David Miller', avatar: '/api/placeholder/40/40', lastMessage: 'Thanks for your help!', time: 'Monday', unread: 0 },
  { id: 5, name: 'Travel Planning', avatar: '/api/placeholder/40/40', lastMessage: 'Elena: What about Barcelona?', time: 'Monday', unread: 0 },
  { id: 6, name: 'Tech Support', avatar: '/api/placeholder/40/40', lastMessage: 'Your ticket has been updated', time: 'Sunday', unread: 1 },
  { id: 7, name: 'Book Club', avatar: '/api/placeholder/40/40', lastMessage: 'Our next meeting is on Friday', time: '05/02', unread: 0 },
  { id: 8, name: 'Jane Smith', avatar: '/api/placeholder/40/40', lastMessage: 'Can you send me that document?', time: '04/28', unread: 0 },
];

const mockMessages = [
  { id: 1, sender: 'other', text: 'Hey there! How are you doing?', time: '9:30 AM' },
  { id: 2, sender: 'me', text: 'I\'m good, thanks! Just working on that project we discussed.', time: '9:35 AM' },
  { id: 3, sender: 'other', text: 'How\'s it coming along? Need any help?', time: '9:38 AM' },
  { id: 4, sender: 'me', text: 'It\'s going well! I should be done by tomorrow.', time: '9:40 AM' },
  { id: 5, sender: 'other', text: 'Are we still meeting tomorrow?', time: '9:41 AM' },
];

const TelegramClone = () => {
  const [activeChat, setActiveChat] = useState(null);
  const [message, setMessage] = useState('');
  const [messages, setMessages] = useState(mockMessages);
  const [chats, setChats] = useState(initialChats);
  const [activeTab, setActiveTab] = useState('chats');
  
  const handleSendMessage = () => {
    if (message.trim() === '') return;
    
    const newMessage = {
      id: messages.length + 1,
      sender: 'me',
      text: message,
      time: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })
    };
    
    setMessages([...messages, newMessage]);
    setMessage('');
  };
  
  const handleKeyPress = (e) => {
    if (e.key === 'Enter') {
      handleSendMessage();
    }
  };
  
  const handleChatSelect = (chatId) => {
    setActiveChat(chatId);
    // Mark messages as read
    setChats(chats.map(chat => 
      chat.id === chatId ? { ...chat, unread: 0 } : chat
    ));
  };
  
  const goBackToChats = () => {
    setActiveChat(null);
  };
  
  const renderChatList = () => (
    <div className="h-full flex flex-col">
      <div className="bg-blue-600 text-white p-4">
        <div className="flex justify-between items-center">
          <div className="flex-1">
            <div className="flex items-center">
              <Search className="h-5 w-5 mr-2" />
              <input 
                type="text" 
                placeholder="Search" 
                className="bg-blue-500 text-white placeholder-blue-200 rounded-md py-1 px-2 w-full focus:outline-none"
              />
            </div>
          </div>
        </div>
      </div>
      
      <div className="overflow-y-auto flex-1">
        {chats.map(chat => (
          <div 
            key={chat.id} 
            className={`flex items-center p-3 border-b border-gray-200 cursor-pointer hover:bg-gray-100 ${chat.unread > 0 ? 'bg-blue-50' : ''}`}
            onClick={() => handleChatSelect(chat.id)}
          >
            <img src={chat.avatar} alt={chat.name} className="w-12 h-12 rounded-full mr-3" />
            <div className="flex-1">
              <div className="flex justify-between">
                <h3 className="font-medium">{chat.name}</h3>
                <span className="text-xs text-gray-500">{chat.time}</span>
              </div>
              <div className="flex justify-between items-center">
                <p className="text-sm text-gray-600 truncate max-w-xs">{chat.lastMessage}</p>
                {chat.unread > 0 && (
                  <span className="bg-blue-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center">
                    {chat.unread}
                  </span>
                )}
              </div>
            </div>
          </div>
        ))}
      </div>
      
      <div className="bg-gray-100 p-3 mt-auto">
        <div className="flex justify-around">
          <button 
            className={`flex flex-col items-center ${activeTab === 'chats' ? 'text-blue-600' : 'text-gray-600'}`}
            onClick={() => setActiveTab('chats')}
          >
            <MessageCircle className="h-6 w-6" />
            <span className="text-xs mt-1">Chats</span>
          </button>
          <button 
            className={`flex flex-col items-center ${activeTab === 'contacts' ? 'text-blue-600' : 'text-gray-600'}`}
            onClick={() => setActiveTab('contacts')}
          >
            <Users className="h-6 w-6" />
            <span className="text-xs mt-1">Contacts</span>
          </button>
          <button 
            className={`flex flex-col items-center ${activeTab === 'calls' ? 'text-blue-600' : 'text-gray-600'}`}
            onClick={() => setActiveTab('calls')}
          >
            <Phone className="h-6 w-6" />
            <span className="text-xs mt-1">Calls</span>
          </button>
          <button 
            className={`flex flex-col items-center ${activeTab === 'settings' ? 'text-blue-600' : 'text-gray-600'}`}
            onClick={() => setActiveTab('settings')}
          >
            <Settings className="h-6 w-6" />
            <span className="text-xs mt-1">Settings</span>
          </button>
        </div>
      </div>
    </div>
  );

  const renderChatInterface = () => {
    const chat = chats.find(c => c.id === activeChat);
    
    return (
      <div className="h-full flex flex-col">
        <div className="bg-blue-600 text-white p-4">
          <div className="flex items-center">
            <button onClick={goBackToChats} className="mr-2">
              <ArrowLeft className="h-6 w-6" />
            </button>
            <img src={chat.avatar} alt={chat.name} className="w-10 h-10 rounded-full mr-3" />
            <div className="flex-1">
              <h3 className="font-medium">{chat.name}</h3>
              <p className="text-xs text-blue-200">online</p>
            </div>
            <div className="flex">
              <button className="ml-2">
                <Phone className="h-5 w-5" />
              </button>
              <button className="ml-4">
                <Video className="h-5 w-5" />
              </button>
              <button className="ml-4">
                <MoreVertical className="h-5 w-5" />
              </button>
            </div>
          </div>
        </div>
        
        <div className="flex-1 overflow-y-auto bg-gray-100 p-4">
          <div className="flex flex-col space-y-3">
            {messages.map(msg => (
              <div 
                key={msg.id} 
                className={`flex ${msg.sender === 'me' ? 'justify-end' : 'justify-start'}`}
              >
                <div 
                  className={`max-w-xs px-4 py-2 rounded-lg ${
                    msg.sender === 'me' 
                      ? 'bg-blue-500 text-white rounded-br-none' 
                      : 'bg-white text-gray-800 rounded-bl-none'
                  }`}
                >
                  <p>{msg.text}</p>
                  <p className={`text-xs mt-1 text-right ${
                    msg.sender === 'me' ? 'text-blue-100' : 'text-gray-500'
                  }`}>
                    {msg.time}
                  </p>
                </div>
              </div>
            ))}
          </div>
        </div>
        
        <div className="bg-white p-4 border-t border-gray-200">
          <div className="flex items-center">
            <button className="text-gray-500 mr-3">
              <Paperclip className="h-6 w-6" />
            </button>
            <input
              type="text"
              value={message}
              onChange={(e) => setMessage(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder="Message"
              className="flex-1 border rounded-full py-2 px-4 focus:outline-none focus:border-blue-500"
            />
            <button 
              onClick={handleSendMessage}
              className="ml-3 bg-blue-500 text-white rounded-full p-2 hover:bg-blue-600 focus:outline-none"
            >
              <Send className="h-5 w-5" />
            </button>
          </div>
        </div>
      </div>
    );
  };

  return (
    <div className="w-full h-screen max-h-screen bg-white">
      {activeChat === null ? renderChatList() : renderChatInterface()}
    </div>
  );
};

export default TelegramClone;
